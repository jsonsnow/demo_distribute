# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.3.0"

default_platform :ios

PROJECT_FILE_PATH = './demo_test_distribute.xcodeproj'
APP_NAME = 'test1'
SCHEME_NAME = 'test1'

APPSTORE_IDENTIFIER = 'com.weicilicai.distribute'
TESTFlIGHT_IDENTIFIER = 'com.weicilicai.distribute'
#PUSH_IDENTIFIER = 'com.test.apptest'
#PLIST_FILE_PATH = 'test1/Info.plist'

# 更新bundle信息
def update_app_bundle(bundle)
  update_app_identifier(
    xcodeproj: PROJECT_FILE_PATH ,
    plist_path: "#{PLIST_FILE_PATH}",
    app_identifier: bundle
  )
end

# build number++
def prepare_version(options)
    #增加版本号
    say 'version number:'
    say options[:version]
    increment_version_number(
        version_number: options[:version],
        xcodeproj: PROJECT_FILE_PATH,
    )
    #增加build号  只能是整数和浮点数
    say 'build number:'
    say options[:build]
    increment_build_number(
        build_number: options[:build],
        xcodeproj: "#{PROJECT_FILE_PATH}",
    )
end

# 设置Info_plist_value里的值(也可直接用 update_info_plist )
def set_info_plist_value(path,key,value)
    #sh 这里是fastline目录里
    sh "/usr/libexec/PlistBuddy -c \"set :#{key} #{value}\" ../#{path}"
end

# 打包 注：这里needClean 针对本人项目使用
def generate_ipa(needClean,exportMethod,options)
    #say 'generate ipa'
    fullVersion = options[:version] + '.' + options[:build]
    gym(
      project: "test1.xcodeproj",
      #workspace: ‘./test1.xcworkspace',
      scheme: 'test1',
      clean: needClean,
      output_directory: "../Test" + fullVersion,
      output_name: 'test1.ipa',
      #configuration: 'Release',
      include_symbols: 'true',
      include_bitcode: 'false',
      archive_path: "../Test" + fullVersion,
      export_method: "#{exportMethod}”
    )
    # sh "mv ./../build/#{APP_NAME}.app.dSYM.zip ./../build/#{APP_NAME}_#{fullVersion}_#{typePrefix}.app.dSYM.zip"
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    #cocoapods  #执行cocoapods
  end

  desc "打App Store包"
  lane :release do
    ensure_git_branch(
      branch: "develop"
    )
    # match(type: "appstore")
    # snapshot
    needClean = true
    prepare_version(options)
    update_app_bundle("#{APPSTORE_IDENTIFIER}")
    generate_ipa(needClean,"app-store",options)
    deliver(force: true)
    # frameit
  end

 desc "打develop包"
  lane :Develop do |options| #测试都是在本地已经有证书和描述文件情况下，如果没有证书和对应描述文件，可打开cert和sigh(待测试)
    #cert
    #sigh(
      #adhoc:true.
      #app_identifier: "#{TESTFlIGHT_IDENTIFIER}"
    #)
    needClean = false
    prepare_version(options)
    update_app_bundle("#{TESTFlIGHT_IDENTIFIER}")
    generate_ipa(needClean,"ad-hoc",options)

  end

  desc "打testFlight"
  lane :beta do |options|
   #cert
    #sigh
    needClean = false
    prepare_version(options)
    update_app_bundle("#{TESTFlIGHT_IDENTIFIER}")
    generate_ipa(needClean,"app-store",options)
    pilot
  end

  desc "打不同identifier Push包"
  lane :enterprise do |options|
   #cert
    #sigh
   #pem
    needClean = false
    prepare_version(options)
    update_app_bundle("#{PUSH_IDENTIFIER}")
    generate_ipa(needClean,"development",options)
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

